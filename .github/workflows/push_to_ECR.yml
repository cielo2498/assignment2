name: Deploy to ECR

on: 
  push:
    branches: [ master ]

jobs:
  build:
    name: Build Image
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        AWS_REGION: us-east-1

    - name: Build and tag Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: cielo2498/assignment2
        IMAGE_TAG: latest
      run: |
        # Docker build command
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .

    - name: Run Docker image and test
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: cielo2498/assignment2
        IMAGE_TAG: latest
      run: |
        # Start Docker container
        docker run -d -p 80:8080 --name nodeapp $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

        # Wait for the application to start
        echo "Pause for 10 seconds to let container start"
        sleep 10

        # Check application status
        curl localhost -vvv

        # Cleanup: stop and remove Docker container
        docker stop nodeapp && docker rm nodeapp

    - name: Push Docker image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: cielo2498/assignment2
        IMAGE_TAG: latest
      run: |
        # Push Docker image
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
